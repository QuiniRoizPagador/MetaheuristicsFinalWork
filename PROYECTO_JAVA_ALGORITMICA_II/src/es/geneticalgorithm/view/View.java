/**
 * Copyright (c) 2018, Joaquín Roiz Pagador y colaboradores.
 * <p>
 * Libre distribución haciendo referencia al autor.
 *
 *
 */
package es.geneticalgorithm.view;

import es.geneticalgorithm.controller.IController;
import es.geneticalgorithm.controller.IReportController;
import es.geneticalgorithm.controller.impl.AlgorithmController;
import es.geneticalgorithm.model.Cliente;
import es.geneticalgorithm.model.Empleado;
import es.geneticalgorithm.model.algorithm.individuals.AbstractIndividual;
import es.geneticalgorithm.model.persistence.MemoryData;
import es.geneticalgorithm.model.report.ReportIndividual;
import es.geneticalgorithm.model.service.IAlgorithmService;
import es.geneticalgorithm.util.Utils;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 * Vista principal de la aplicación.
 *
 * @see IController
 * @see IAlgorithmService
 * @see AbstractIndividual
 * @see List
 * @see ReportIndividual
 * @see PersonTableModel
 *
 * @author Quini Roiz
 */
public class View extends AbstractView<IAlgorithmService, AlgorithmController> {

    private int algType;
    private int problemType;
    private ReportIndividual o;
    private int nPacientes = 20;
    private int nMedicos = 20;
    private final PersonTableModel<Empleado> empTM;
    private final PersonTableModel<Cliente> clTM;
    private final JFreeChart chart, chart2;
    private XYSeries seriesLine, serieScatterEmployees, serieScatterClients;
    private XYSeriesCollection datasetLine, datasetScatter;
    private final ChartPanel chartPanel, chartPanel2;
    private double max = Double.POSITIVE_INFINITY;
    private boolean change;

    /**
     * Creates new form View
     */
    public View() {
        super();

        datasetLine = new XYSeriesCollection();
        seriesLine = new XYSeries("Fitnesss");
        datasetLine.addSeries(seriesLine);
        chart = ChartFactory.createXYLineChart("Mejoras", "", "", datasetLine);
        chart.getPlot().setBackgroundPaint(Color.WHITE);
        chartPanel = new ChartPanel(chart);

        datasetScatter = new XYSeriesCollection();
        serieScatterEmployees = new XYSeries("Empleados");
        serieScatterClients = new XYSeries("Clientes");
        datasetScatter.addSeries(serieScatterEmployees);
        datasetScatter.addSeries(serieScatterClients);
        chart2 = ChartFactory.createScatterPlot("Dispersión datos", "", "", datasetScatter);
        chart2.getPlot().setBackgroundPaint(Color.WHITE);
        chartPanel2 = new ChartPanel(chart2);
        //chartPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        //chartPanel.setBackground(Color.white);
        empTM = new PersonTableModel();
        clTM = new PersonTableModel();

        initComponents();
        jChartPanel.setLayout(new java.awt.BorderLayout());
        jChartPanel.add(chartPanel, BorderLayout.CENTER);
        jChartPanel.validate();

        jChartPanel2.setLayout(new java.awt.BorderLayout());
        jChartPanel2.add(chartPanel2, BorderLayout.CENTER);
        jChartPanel2.validate();
        pack();
        setTitle("Análisis visual");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        cbAlgoritmo = new javax.swing.JComboBox<>();
        lblTime = new javax.swing.JLabel();
        lblResTime = new javax.swing.JLabel();
        lblPuntuacionUp = new javax.swing.JLabel();
        lblPuntuacion = new javax.swing.JLabel();
        cbPacientes = new javax.swing.JComboBox<>();
        cbMedicos = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbAsync = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMedicos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnEjecutar = new javax.swing.JButton();
        btnParar = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        lblFinish = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jChartPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jChartPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Algoritmos");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(51, 0, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbAlgoritmo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbAlgoritmo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Genético", "Enfriamiento Simulado", "Memético", "Red Neuronal" }));
        cbAlgoritmo.setBorder(null);
        cbAlgoritmo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cbAlgoritmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAlgoritmoActionPerformed(evt);
            }
        });
        jPanel1.add(cbAlgoritmo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        lblTime.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTime.setForeground(new java.awt.Color(255, 255, 255));
        lblTime.setIcon(new javax.swing.ImageIcon("C:\\Users\\cobra\\OneDrive\\Documentos\\NetBeansProjects\\MetaheuristicsFinalWork\\PROYECTO_JAVA_ALGORITMICA_II\\data\\img\\time.png")); // NOI18N
        lblTime.setText("hh:mm:ss:ms");
        jPanel1.add(lblTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 140, 30));

        lblResTime.setBackground(new java.awt.Color(102, 102, 102));
        lblResTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblResTime.setForeground(new java.awt.Color(255, 255, 255));
        lblResTime.setText("00:00:00:00");
        jPanel1.add(lblResTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 160, 20));

        lblPuntuacionUp.setBackground(new java.awt.Color(255, 255, 255));
        lblPuntuacionUp.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPuntuacionUp.setForeground(new java.awt.Color(255, 255, 255));
        lblPuntuacionUp.setIcon(new javax.swing.ImageIcon("C:\\Users\\cobra\\OneDrive\\Documentos\\NetBeansProjects\\MetaheuristicsFinalWork\\PROYECTO_JAVA_ALGORITMICA_II\\data\\img\\score.png")); // NOI18N
        lblPuntuacionUp.setText("Puntuacion");
        jPanel1.add(lblPuntuacionUp, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 140, 30));

        lblPuntuacion.setBackground(new java.awt.Color(102, 102, 102));
        lblPuntuacion.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblPuntuacion.setForeground(new java.awt.Color(255, 255, 255));
        lblPuntuacion.setText("0");
        jPanel1.add(lblPuntuacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 160, 30));

        cbPacientes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbPacientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "20", "200", "2000" }));
        cbPacientes.setBorder(null);
        cbPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPacientesActionPerformed(evt);
            }
        });
        jPanel1.add(cbPacientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 360, 70, 30));

        cbMedicos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbMedicos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "20", "200", "2000" }));
        cbMedicos.setBorder(null);
        cbMedicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMedicosActionPerformed(evt);
            }
        });
        jPanel1.add(cbMedicos, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, 70, 30));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\cobra\\OneDrive\\Documentos\\NetBeansProjects\\MetaheuristicsFinalWork\\PROYECTO_JAVA_ALGORITMICA_II\\data\\img\\heart.png")); // NOI18N
        jLabel3.setText("Pacientes");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 320, 110, 30));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\cobra\\OneDrive\\Documentos\\NetBeansProjects\\MetaheuristicsFinalWork\\PROYECTO_JAVA_ALGORITMICA_II\\data\\img\\doctor.png")); // NOI18N
        jLabel4.setText("Médicos");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, 80, 30));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Algoritmo a utilizar");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, -1));

        cbAsync.setBackground(new java.awt.Color(51, 0, 102));
        cbAsync.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cbAsync.setForeground(new java.awt.Color(255, 255, 255));
        cbAsync.setText("Paralelo");
        jPanel1.add(cbAsync, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, 160, 30));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, 240, 10));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 240, 10));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 240, 10));
        jPanel1.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 240, 10));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, -6, 280, 840));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        tbMedicos.setBackground(new java.awt.Color(255, 255, 255));
        tbMedicos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        tbMedicos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tbMedicos.setModel(empTM);
        tbMedicos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbMedicos.setGridColor(new java.awt.Color(255, 255, 255));
        tbMedicos.setSelectionBackground(new java.awt.Color(102, 102, 255));
        tbMedicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMedicosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbMedicos);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 450, 390));

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jTable2.setBackground(new java.awt.Color(255, 255, 255));
        jTable2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jTable2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable2.setModel(clTM);
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable2.setGridColor(new java.awt.Color(255, 255, 255));
        jTable2.setSelectionBackground(new java.awt.Color(102, 102, 255));
        jScrollPane2.setViewportView(jTable2);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 340, 440, 390));

        btnEjecutar.setText("Ejecutar");
        btnEjecutar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });
        jPanel2.add(btnEjecutar, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 790, 70, 30));

        btnParar.setText("Parar");
        btnParar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPararActionPerformed(evt);
            }
        });
        jPanel2.add(btnParar, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 790, 70, 30));

        jProgressBar1.setForeground(new java.awt.Color(102, 102, 255));
        jProgressBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(jProgressBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 790, 530, 26));

        lblFinish.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblFinish, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 790, 240, 26));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Médicos disponibles");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 300, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Pacientes");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 300, -1, -1));

        org.jdesktop.layout.GroupLayout jChartPanelLayout = new org.jdesktop.layout.GroupLayout(jChartPanel);
        jChartPanel.setLayout(jChartPanelLayout);
        jChartPanelLayout.setHorizontalGroup(
            jChartPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 460, Short.MAX_VALUE)
        );
        jChartPanelLayout.setVerticalGroup(
            jChartPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 270, Short.MAX_VALUE)
        );

        jPanel2.add(jChartPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 460, 270));

        jPanel3.setBackground(new java.awt.Color(102, 102, 255));

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 940, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 50, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 940, 50));

        org.jdesktop.layout.GroupLayout jChartPanel2Layout = new org.jdesktop.layout.GroupLayout(jChartPanel2);
        jChartPanel2.setLayout(jChartPanel2Layout);
        jChartPanel2Layout.setHorizontalGroup(
            jChartPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 460, Short.MAX_VALUE)
        );
        jChartPanel2Layout.setVerticalGroup(
            jChartPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 270, Short.MAX_VALUE)
        );

        jPanel2.add(jChartPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 20, 460, 270));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(276, 1, 940, 830));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbAlgoritmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAlgoritmoActionPerformed
        switch (cbAlgoritmo.getSelectedIndex()) {
            case 0:
                algType = cbAlgoritmo.getSelectedIndex();
                break;
            case 1:
                algType = cbAlgoritmo.getSelectedIndex();
                break;
            case 2:
                algType = Utils.MEMETIC_ALGORITHM_TYPE;
                break;
            case 3:
                algType = Utils.NEURAL_NETWORK_ALGORITHM_TYPE;
                break;
        }

    }//GEN-LAST:event_cbAlgoritmoActionPerformed

    private void cbMedicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMedicosActionPerformed
        switch (cbMedicos.getSelectedIndex()) {
            case 0:
                nMedicos = 20;
                break;
            case 1:
                nMedicos = 200;
                break;
            case 2:
                nMedicos = 2000;
                break;
        }
        controllers.get(0).readData(nPacientes, nMedicos);
        empTM.setPersona(MemoryData.getInstance().getEmployees());
        updateChart2();
    }//GEN-LAST:event_cbMedicosActionPerformed

    private void updateChart2() {
        chart2.setNotify(false);
        serieScatterEmployees.clear();
        serieScatterClients.clear();
        chart2.setNotify(true);
        MemoryData.getInstance().getEmployees().forEach((employee) -> {
            serieScatterEmployees.add(employee.getDir_x(), employee.getDir_y());
        });
        MemoryData.getInstance().getClients().forEach((client) -> {
            serieScatterClients.add(client.getDir_x(), client.getDir_y());
        });
    }
    private void cbPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPacientesActionPerformed
        switch (cbPacientes.getSelectedIndex()) {
            case 0:
                nPacientes = 20;
                break;
            case 1:
                nPacientes = 200;
                break;
            case 2:
                nPacientes = 2000;
                break;
        }
        controllers.get(0).readData(nPacientes, nMedicos);
        clTM.setPersona(MemoryData.getInstance().getClients());
        updateChart2();
    }//GEN-LAST:event_cbPacientesActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        if (nMedicos < nPacientes) {
            JOptionPane.showMessageDialog(this, "Error, con tan pocos médicos no podemos atenter tantos pacientes. Prueba con más médicos.");
        } else {
            try {
                changeEnable(false);
                jProgressBar1.setValue(0);
                lblResTime.setText("");
                best = null;
                lblFinish.setText("Preparando datos...");
                controllers.get(0).selectProblemType(algType, cbAsync.isSelected());
                controllers.get(0).executeAlgorithm();
                lblFinish.setText("Ejecutando algoritmo...");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(new JFrame(), ex.getMessage(), "Error",
                        JOptionPane.ERROR_MESSAGE);
                lblFinish.setText("");
                changeEnable(true);
            }
        }
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void tbMedicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMedicosMouseClicked

    }//GEN-LAST:event_tbMedicosMouseClicked

    private void btnPararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPararActionPerformed
        model.stopEjecutation();
    }//GEN-LAST:event_btnPararActionPerformed

    private void changeEnable(boolean enable) {
        btnEjecutar.setVisible(enable);
        jProgressBar1.setVisible(!enable);
        cbAlgoritmo.setEnabled(enable);
        cbPacientes.setEnabled(enable);
        cbMedicos.setEnabled(enable);
        cbAsync.setEnabled(enable);
        btnParar.setVisible(!enable);
    }

    @Override
    public void display() {
        controllers.get(0).readData(nPacientes, nMedicos);
        empTM.setPersona(MemoryData.getInstance().getEmployees());
        clTM.setPersona(MemoryData.getInstance().getClients());
        //setExtendedState(JFrame.MAXIMIZED_BOTH);
        //setUndecorated(true);
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setVisible(false);
        btnParar.setVisible(false);
        super.display();
        updateChart2();
    }

    @Override
    public synchronized void dataModelChanged() {
        AbstractIndividual ind = getModel().getAlgorithm().getBest();

        long time = System.currentTimeMillis() - startTime;
        Calendar date = new GregorianCalendar();
        date.setTimeInMillis((long) time);
        date.add(Calendar.HOUR, -1);
        lblResTime.setText(date.get(Calendar.HOUR) + ":" + date.get(Calendar.MINUTE) + ":" + date.get(Calendar.SECOND) + ":" + date.get(Calendar.MILLISECOND));
        if (ind != null && (best == null || ind.compareTo(best) < 0)) {
            double posExito = model.getAlgorithm().getPosExito();
            best = ind;
            lblPuntuacion.setText(String.valueOf(100 * ind.getFitness()));
            o = new ReportIndividual(ind, date, posExito + 1);
            max = ind.getFitness();
            double time2 = (System.currentTimeMillis() - startTime) * 1E-3;
            seriesLine.add(time2, max);
            chartPanel.updateUI();
        }
        if (change) {
            chart.setNotify(false);
            for (int i = 0; i < datasetLine.getSeries().size(); i++) {
                XYSeries timeSeries = (XYSeries) datasetLine.getSeries()
                        .get(i);
                timeSeries.clear();
            }
            chart.setNotify(true);
            change = false;
        }

        jProgressBar1.setValue((int) model.getAlgorithm().getPorcentaje());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JButton btnParar;
    private javax.swing.JComboBox<String> cbAlgoritmo;
    private javax.swing.JCheckBox cbAsync;
    private javax.swing.JComboBox<String> cbMedicos;
    private javax.swing.JComboBox<String> cbPacientes;
    private javax.swing.JPanel jChartPanel;
    private javax.swing.JPanel jChartPanel2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblFinish;
    private javax.swing.JLabel lblPuntuacion;
    private javax.swing.JLabel lblPuntuacionUp;
    private javax.swing.JLabel lblResTime;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTable tbMedicos;
    // End of variables declaration//GEN-END:variables

    @Override
    public synchronized void notifyFinished() {
        jProgressBar1.setValue((int) getModel().getAlgorithm().getPorcentaje());
        lblFinish.setText("exportando...");
        try {
            if (o == null) {
                JOptionPane.showMessageDialog(this, "No se han encontrado soluciones.");
            } else {
                changeEnable(true);
                lblFinish.setText("Finished!");
                Toolkit.getDefaultToolkit().beep();
                change = true;
                int dialogButton = JOptionPane.showConfirmDialog(null, "¿Quieres exportar los resultados?\n Si decides no hacerlo se perderán!!!", "Atención", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                if (dialogButton == JOptionPane.YES_OPTION) { //The ISSUE is here

                    OutputStream out = null;
                    try {
                        out = new FileOutputStream("image_aux.png");
                        ChartUtilities.writeChartAsPNG(out,
                                chart,
                                chartPanel.getWidth(),
                                chartPanel.getHeight());
                        ((IReportController) controllers.get(1)).exportFile(algType, problemType, o, cbAsync.isSelected());
                        String url = ((IReportController) controllers.get(1)).exportPDF(algType, problemType, o, cbAsync.isSelected());
                        Desktop desktop = Desktop.getDesktop();
                        File file = new File(url);
                        desktop.open(file);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(Chart.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(Chart.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            out.close();
                        } catch (IOException ex) {
                            Logger.getLogger(Chart.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(new JFrame(), ex.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }

    @Override
    public void notifyStarted() {
        startTime = System.currentTimeMillis();
        best = null;
    }

}
