/**
 * Copyright (c) 2018, Joaquín Roiz Pagador y colaboradores.
 * <p>
 * Libre distribución haciendo referencia al autor.
 *
 *
 */
package es.geneticalgorithm.view;

import es.geneticalgorithm.controller.IController;
import es.geneticalgorithm.controller.impl.AlgorithmController;
import es.geneticalgorithm.controller.IReportController;
import es.geneticalgorithm.model.Cliente;
import es.geneticalgorithm.model.Empleado;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.File;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import es.geneticalgorithm.model.algorithm.individuals.AbstractIndividual;
import es.geneticalgorithm.model.persistence.MemoryData;
import es.geneticalgorithm.model.report.ReportIndividual;
import es.geneticalgorithm.model.service.IAlgorithmService;
import es.geneticalgorithm.util.Utils;
import javax.swing.JFrame;

/**
 * Vista principal de la aplicación.
 *
 * @see IController
 * @see IAlgorithmService
 * @see AbstractIndividual
 * @see List
 * @see ReportIndividual
 * @see PersonTableModel
 *
 * @author Quini Roiz
 */
public class View extends AbstractView<IAlgorithmService, AlgorithmController> {

    private int algType;
    private int problemType;
    private ReportIndividual o;
    private int nPacientes = 20;
    private int nMedicos = 20;
    private final PersonTableModel<Empleado> empTM;
    private final PersonTableModel<Cliente> clTM;

    /**
     * Creates new form View
     */
    public View() {
        super();
        empTM = new PersonTableModel();
        clTM = new PersonTableModel();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        cbAlgoritmo = new javax.swing.JComboBox<>();
        lblTime = new javax.swing.JLabel();
        lblResTime = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblPuntuacion = new javax.swing.JLabel();
        cbPacientes = new javax.swing.JComboBox<>();
        cbMedicos = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbAsync = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMedicos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnEjecutar = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        lblFinish = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Algoritmos");
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbAlgoritmo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Genético", "Enfriamiento Simulado", "Memético", "Red Neuronal" }));
        cbAlgoritmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAlgoritmoActionPerformed(evt);
            }
        });
        jPanel1.add(cbAlgoritmo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, -1));

        lblTime.setForeground(new java.awt.Color(0, 0, 0));
        lblTime.setText("Tiempo");
        jPanel1.add(lblTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 50, -1, -1));
        jPanel1.add(lblResTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 50, 130, 20));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("hh:mm:ss:ms");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 20, -1, -1));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Puntuacion");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 20, -1, -1));
        jPanel1.add(lblPuntuacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 50, 170, 20));

        cbPacientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "20", "200", "2000" }));
        cbPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPacientesActionPerformed(evt);
            }
        });
        jPanel1.add(cbPacientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, -1, -1));

        cbMedicos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "20", "200", "2000" }));
        cbMedicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMedicosActionPerformed(evt);
            }
        });
        jPanel1.add(cbMedicos, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 50, -1, -1));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Pacientes");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 20, -1, -1));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Médicos");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, -1, -1));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Algoritmo a utilizar");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, -1));

        cbAsync.setText("Paralelo");
        jPanel1.add(cbAsync, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 50, -1, -1));

        tbMedicos.setModel(empTM);
        tbMedicos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbMedicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMedicosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbMedicos);

        jTable2.setModel(clTM);
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane2.setViewportView(jTable2);

        btnEjecutar.setText("Ejecutar");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });

        lblFinish.setForeground(new java.awt.Color(0, 204, 51));

        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Médicos disponibles");

        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Pacientes");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblFinish, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEjecutar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(244, 244, 244)
                                .addComponent(jLabel6)))
                        .addGap(77, 77, 77)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(188, 188, 188)
                                .addComponent(jLabel7)))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEjecutar))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel7)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFinish, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        if (nMedicos < nPacientes) {
            JOptionPane.showMessageDialog(this, "Error, con tan pocos médicos no podemos atenter tantos pacientes. Prueba con más médicos.");
        } else {
            try {
                changeEnable(false);
                jProgressBar1.setValue(0);
                lblResTime.setText("");
                best = null;
                lblFinish.setText("Preparando datos...");
                controllers.get(0).selectProblemType(algType, cbAsync.isSelected());
                controllers.get(0).executeAlgorithm();
                lblFinish.setText("Ejecutando algoritmo...");
            } catch (CloneNotSupportedException | UnsupportedOperationException ex) {
                JOptionPane.showMessageDialog(new JFrame(), ex.getMessage(), "Error",
                        JOptionPane.ERROR_MESSAGE);
                changeEnable(true);
            }
        }
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void cbAlgoritmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAlgoritmoActionPerformed
        switch (cbAlgoritmo.getSelectedIndex()) {
            case 0:
                algType = cbAlgoritmo.getSelectedIndex();
                break;
            case 1:
                algType = cbAlgoritmo.getSelectedIndex();
                break;
            case 2:
                algType = Utils.MEMETIC_ALGORITHM_TYPE;
                break;
            case 3:
                algType = Utils.NEURAL_NETWORK_ALGORITHM_TYPE;
                break;
        }

    }//GEN-LAST:event_cbAlgoritmoActionPerformed

    private void cbMedicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMedicosActionPerformed
        switch (cbMedicos.getSelectedIndex()) {
            case 0:
                nMedicos = 20;
                break;
            case 1:
                nMedicos = 200;
                break;
            case 2:
                nMedicos = 2000;
                break;
        }
        controllers.get(0).readData(nPacientes, nMedicos);
        empTM.setPersona(MemoryData.getInstance().getEmployees());
        clTM.setPersona(MemoryData.getInstance().getClients());
    }//GEN-LAST:event_cbMedicosActionPerformed

    private void cbPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPacientesActionPerformed
        switch (cbPacientes.getSelectedIndex()) {
            case 0:
                nPacientes = 20;
                break;
            case 1:
                nPacientes = 200;
                break;
            case 2:
                nPacientes = 2000;
                break;
        }
        controllers.get(0).readData(nPacientes, nMedicos);
        empTM.setPersona(MemoryData.getInstance().getEmployees());
        clTM.setPersona(MemoryData.getInstance().getClients());
    }//GEN-LAST:event_cbPacientesActionPerformed

    private void tbMedicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMedicosMouseClicked

    }//GEN-LAST:event_tbMedicosMouseClicked

    private void changeEnable(boolean enable) {
        btnEjecutar.setVisible(enable);
        jProgressBar1.setVisible(!enable);
        cbAlgoritmo.setEnabled(enable);
        cbPacientes.setEnabled(enable);
        cbMedicos.setEnabled(enable);
        cbAsync.setEnabled(enable);
    }

    @Override
    public void display() {
        controllers.get(0).readData(nPacientes, nMedicos);
        empTM.setPersona(MemoryData.getInstance().getEmployees());
        clTM.setPersona(MemoryData.getInstance().getClients());
        //setExtendedState(JFrame.MAXIMIZED_BOTH);
        //setUndecorated(true);
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setVisible(false);

        super.display();
    }

    @Override
    public synchronized void dataModelChanged() {
        AbstractIndividual ind = getModel().getAlgorithm().getBest();

        long time = System.currentTimeMillis() - startTime;
        Calendar date = new GregorianCalendar();
        date.setTimeInMillis((long) time);
        date.add(Calendar.HOUR, -1);
        lblResTime.setText(date.get(Calendar.HOUR) + ":" + date.get(Calendar.MINUTE) + ":" + date.get(Calendar.SECOND) + ":" + date.get(Calendar.MILLISECOND));
        if (best == null || ind.compareTo(best) < 0) {
            double posExito = model.getAlgorithm().getPosExito();
            best = ind;
            lblPuntuacion.setText(String.valueOf(100 * ind.getFitness()));
            o = new ReportIndividual(ind, date, posExito + 1);
        }

        jProgressBar1.setValue((int) model.getAlgorithm().getPorcentaje());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JComboBox<String> cbAlgoritmo;
    private javax.swing.JCheckBox cbAsync;
    private javax.swing.JComboBox<String> cbMedicos;
    private javax.swing.JComboBox<String> cbPacientes;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblFinish;
    private javax.swing.JLabel lblPuntuacion;
    private javax.swing.JLabel lblResTime;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTable tbMedicos;
    // End of variables declaration//GEN-END:variables

    @Override
    public synchronized void notifyFinished() {
        jProgressBar1.setValue((int) getModel().getAlgorithm().getPorcentaje());
        lblFinish.setText("exportando...");
        try {
            if (o == null) {
                JOptionPane.showMessageDialog(this, "No se han encontrado soluciones.");
            } else {
                ((IReportController) controllers.get(1)).exportFile(algType, problemType, o, cbAsync.isSelected());
                String url = ((IReportController) controllers.get(1)).exportPDF(algType, problemType, o, cbAsync.isSelected());
                Desktop desktop = Desktop.getDesktop();
                File file = new File(url);
                desktop.open(file);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(new JFrame(), ex.getMessage(), "Error",
                        JOptionPane.ERROR_MESSAGE);
        }
        changeEnable(true);
        lblFinish.setText("Finished!");
        Toolkit.getDefaultToolkit().beep();
    }

    @Override
    public void notifyStarted() {
        startTime = System.currentTimeMillis();
    }

}
