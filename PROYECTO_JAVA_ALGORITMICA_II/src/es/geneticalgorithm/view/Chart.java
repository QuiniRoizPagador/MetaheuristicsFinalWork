/**
 * Copyright (c) 2018, Joaquín Roiz Pagador y colaboradores.
 * <p>
 * Libre distribución haciendo referencia al autor.
 *
 *
 */
package es.geneticalgorithm.view;

import es.geneticalgorithm.controller.IController;
import es.geneticalgorithm.controller.impl.AlgorithmController;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import es.geneticalgorithm.model.algorithm.individuals.AbstractIndividual;
import es.geneticalgorithm.model.service.IAlgorithmService;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 * Vista secundaria de la aplicación.
 *
 * @see IController
 * @see IAlgorithmService
 * @see AbstractIndividual
 * @see JFreeChart
 * @see XYSeries
 * @see XYSeriesCollection
 * @see ChartPanel
 *
 * @author Quini Roiz
 */
public class Chart extends AbstractView<IAlgorithmService, AlgorithmController> {

    private final JFreeChart chart;
    private XYSeries series;
    private XYSeriesCollection dataset;
    private final ChartPanel chartPanel;
    private double max = Double.POSITIVE_INFINITY;
    private boolean change;

    /**
     * Creates new form Chart
     */
    public Chart() {
        XYDataset dataset = createDataset();
        chart = createChart(dataset);
        chartPanel = new ChartPanel(chart);
        chartPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        chartPanel.setBackground(Color.white);
        add(chartPanel);

        pack();
        setTitle("Análisis visual");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        initComponents();

    }

    private XYDataset createDataset() {

        series = new XYSeries("Problem");

        dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        return dataset;
    }

    private JFreeChart createChart(XYDataset dataset) {

        JFreeChart chart = ChartFactory.createXYLineChart(
                    "Resultado en cada iteración mejorada",
                    "Tiempo",
                    "Fitness",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true,
                    true,
                    false
        );

        XYPlot plot = chart.getXYPlot();

        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesPaint(0, Color.RED);
        renderer.setSeriesStroke(0, new BasicStroke(2.0f));

        plot.setRenderer(renderer);
        plot.setBackgroundPaint(Color.white);

        plot.setRangeGridlinesVisible(true);
        plot.setRangeGridlinePaint(Color.BLACK);

        plot.setDomainGridlinesVisible(true);
        plot.setDomainGridlinePaint(Color.BLACK);

        chart.getLegend().setFrame(BlockBorder.NONE);

        chart.setTitle(new TextTitle("Resultado de las iteraciones",
                    new Font("Serif", java.awt.Font.BOLD, 18)
        )
        );

        return chart;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void display() {
        setSize(700, 450);
        super.display();
    }

    @Override
    public synchronized void dataModelChanged() {
        AbstractIndividual ind = model.getAlgorithm().getBest();
        if (change) {
            chart.setNotify(false);
            for (int i = 0; i < dataset.getSeries().size(); i++) {
                XYSeries timeSeries = (XYSeries) dataset.getSeries()
                            .get(i);
                timeSeries.clear();
            }
            chart.setNotify(true);
            change = false;
        }
        if (best == null || ind.compareTo(best) < 0) {
            best = ind;
            max = ind.getFitness();
            double time = (System.currentTimeMillis() - startTime) * 1E-3;
            series.add(time, max);
            chartPanel.updateUI();
        }
    }

    @Override
    public void notifyStarted() {
        startTime = System.currentTimeMillis();
        best = null;
    }

    @Override
    public synchronized void notifyFinished() {
        OutputStream out = null;
        change = true;
        try {
            out = new FileOutputStream("image_aux.png");
            ChartUtilities.writeChartAsPNG(out,
                        chart,
                        chartPanel.getWidth(),
                        chartPanel.getHeight());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Chart.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Chart.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Chart.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
